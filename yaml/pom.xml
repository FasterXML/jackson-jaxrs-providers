<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- This module was also published with a richer model, Gradle metadata,  -->
  <!-- which should be used instead. Do not delete the following line which  -->
  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->
  <!-- that they should prefer consuming it instead. -->
  <!-- do_not_remove: published-with-gradle-metadata -->
  <modelVersion>4.0.0</modelVersion> 
  <parent>
    <groupId>tools.jackson.jaxrs</groupId>
    <artifactId>jackson-jaxrs-providers</artifactId>
    <version>3.0.0-rc1</version>
  </parent>
  <artifactId>jackson-jaxrs-yaml-provider</artifactId>
  <name>Jackson-JAXRS: YAML</name>
  <packaging>jar</packaging>
  <description>Functionality to handle YAML input/output for JAX-RS implementations (like Jersey and RESTeasy)
using standard Jackson data binding.
  </description>

  <properties>
    <!-- Generate PackageVersion.java into this directory. -->
    <packageVersion.dir>tools/jackson/jaxrs/yaml</packageVersion.dir>
    <packageVersion.package>${project.groupId}.yaml</packageVersion.package>
    <osgi.export>${project.groupId}.yaml.*;version=${project.version}</osgi.export>
    <!-- NOTE: JAXB annotations module is optional dependency, need to try to mark
         as such here.
      -->
    <osgi.import>javax.ws.rs;version="${javax.ws.rs.version}"
,javax.ws.rs.core;version="${javax.ws.rs.version}"
,javax.ws.rs.ext;version="${javax.ws.rs.version}"
,tools.jackson.module.jaxb;resolution:=optional
,*
</osgi.import>
  </properties>

  <dependencies>
    <!-- builds on shared base JAX-RS handling code... -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jackson-jaxrs-base</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Extends Jackson core, mapper, and also (sort of optionally) on JAXB annotation handler -->
    <dependency>
      <groupId>tools.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
    </dependency>
    <!-- may also need JAXB annotation support -->
    <!-- 05-Dec-2024, tatu: [jaxrs-providers#123] Make optional -->
    <dependency> 
      <groupId>tools.jackson.module</groupId>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Use JSON and Smile providers for testing that content negotiation works with multiple providers registered. -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jackson-jaxrs-smile-provider</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <!-- Inherited from oss-base. Generate PackageVersion.java.-->
        <groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>replacer</artifactId>
        <executions>
          <execution>
            <id>process-packageVersion</id>
            <phase>process-sources</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>no-meta-inf-services</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <classifier>no-metainf-services</classifier>
              <excludes>
                <exclude>META-INF/services/**</exclude>
              </excludes>
              <archive>
                <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- 05-Jul-2020, tatu: Add generation of Gradle Module Metadata -->
      <!-- 28-Feb-2025, jjohannes: Apply plugin last as it has to be the last of all 'package phase' plugins -->
      <plugin>
        <groupId>org.gradlex</groupId>
        <artifactId>gradle-module-metadata-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
